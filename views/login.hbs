<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login Form</title>

  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  
  <!-- Font Awesome for Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

  <style>
    * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    font-family: Arial, sans-serif;
}
    body {
      background-image: url("/1329272.png");
      background-repeat: no-repeat;
      background-position: center center;
      background-attachment: fixed;
      background-size: cover;
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .login-container {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    max-width: 900px;
}

.login-box {
    display: flex;
      align-items: stretch; /* Align sections vertically */
      background: rgba(255, 255, 255, 0.1);
      border-radius: 10px;
      padding: 40px;
      backdrop-filter: blur(10px);
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
}

.logo-section {
    flex: 1;
    display: flex; /* Use Flexbox to position image and text side by side */
    flex-direction: rpw; /* Set the direction to row */
    align-items: center; /* Align items vertically centered */
    justify-content: center; /* Align items to the left */
    color: white;
    padding-right: 20px;
}

.logo-image {
    width: 50px; /* Adjust the width as needed */
    height: 50px; /* Adjust the height as needed */
    margin-right: 10px; /* Space between image and text */
}

.logo-text {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
}
.logo-text h1 {
    font-family: 'Roboto', sans-serif; 
    font-size: 36px;
    margin-bottom: 0; /* Remove extra margin */
}

.logo-text p {
    font-size: 14px;
    color: #ccc;
    margin: 0;
}

.partition {
    width: 1px;
    background-color: rgba(255, 255, 255, 0.3);
    margin: 0 20px; /* Space between sections */
}
.login-form {
    flex: 1; /* Adjusts size to take up one part of the space */
    display: flex;
    flex-direction: column;
    padding-left: 20px;
}

.login-form h2 {
      font-family: 'Roboto', sans-serif; 
      margin-bottom: 20px;
      color: white;
      text-align: center;
    }
    
    .form-group {
    margin-bottom: 15px;
    position: relative;
    }

    .form-group label {
    color: white;
    font-size: 14px;
    margin-bottom: 5px;
    display: block;
}

 .input-container {
      position: relative;
      width: 100%;
    }

    .input-container input {
      width: 100%;
      padding: 10px 10px 10px 60px; /* Padding to make room for the icon */
      border: none;
      border-radius: 5px;
      outline: none;
      background: rgba(255, 255, 255, 0.2);
      color: white;
    }

     .input-icon {
      position: absolute;
      left: 10px;
      top: 50%;
      transform: translateY(-50%);
      color: #ccc;
    }

    .input-divider {
      position: absolute;
      left: 35px;
      top: 10px;
      bottom: 10px;
      width: 1px;
      background-color: rgba(255, 255, 255, 0.3);
    }

.form-group input {
    padding: 10px 10px 10px 60px; /* Adjust as needed */
    width: 100%;
    border: none;
    border-radius: 5px;
    outline: none;
    background: rgba(255, 255, 255, 0.2);
    color: white;
}

input::placeholder {
  color: rgba(255, 255, 255, 0.7); /* Adjust the color as needed */
  font-family: 'Roboto', sans-serif; /* Change to your desired font */
  font-size: 14px; /* Adjust font size as needed */
}
.options {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    color: #ccc;
}

.options a {
    color: #ccc;
    text-decoration: none;
    font-size: 12px;
    display: flex;
    align-items: center; /* Align text and icon vertically */
}

.options a.forgot-password {
    font-size: 17px;
    font-family: 'Roboto', sans-serif; 
    color: #ccc; /* Maintain existing color */
    text-decoration: none;
    display: flex;
    align-items: center; 
}

.options a i {
      margin-right: 8px; /* Space between icon and text */
    }

.options a:hover {
    text-decoration: underline;
}

.login-button {
    background-color: #2874f0;
    color: white;
    border: none;
    padding: 10px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.login-button:hover {
    background-color: #0056b3;
}
    .error-message {
      color: red;
      margin-top: 10px;
      font-size: 14px;
    }

    .register-link {
      text-align: center;
      margin-top: 20px;
      color: #ccc; 
      font-size: 18px;
      font-family: 'Roboto', sans-serif; 
    }

    .register-link a {
      color: #007bff;
      text-decoration: none;
      font-size: 14px;
    }

    .register-link a:hover {
      text-decoration: underline;
    }

  </style>
</head>

<body>
  <div class="login-container">
    <div class="login-box">

      <!-- Logo Section -->
      <div class="logo-section">
        <img src="/logo.jpg" alt="Logo" class="logo-image">
            <div class="logo-text">
              <h1>GitHelper</h1>   
            </div>
      </div>

    <!-- Partition Line -->
    <div class="partition"></div>
    
    <!-- Login Form Section -->
    
    <form id="login-form" class="login-form" action="/api/login" method="post">
      
      <!-- Image Above the Form -->
      <img src="/people.png" alt="Login Illustration" style="width: 100%; height: auto; margin-bottom: 20px;">
      
      <div class="form-group">
        <div class="input-container"></div>
            <i class="fas fa-user input-icon"></i>
        <div class="input-divider"></div>
        <input type="text" id="username" placeholder="Username" name="username" required>
      </div>

      <div class="form-group">
        <div class="input-container"></div>
            <i class="fas fa-lock input-icon"></i>
        <div class="input-divider"></div>
        <input type="password" placeholder="Password" id="password" required>
        <input type="password" name="encryptedpassword"   id="encryptedpassword" required readonly hidden>
      </div>
      <div class="options">
        <label>
          <input type="checkbox"> Remember me
        </label>
          <a href="#" class="forgot-password"><i class="fas fa-key"></i>Forgot Password?</a>
      </div>
      <button type="submit" class="login-button">LOGIN</button>
      
      <div class="register-link" style="text-align: center; margin-top: 20px;">
        <p>Don't have an account? <a href="/api/register" style="font-size: 17px">Register</a></p>
      </div>
    </div>
    </form>
    <p id="error-message" class="error-message"></p>
    
  </div>

  <script>
    document.getElementById("login-form").addEventListener("submit", function(event) {
    
      var username = document.getElementById("username").value;
      var password = document.getElementById("password").value;

      
      var usernameRegex = /^[a-zA-Z0-9_]+$/;
      if (!usernameRegex.test(username)) {
          document.getElementById("error-message").innerText = "Invalid Username.";
          event.preventDefault();
          return;
      }

      
      var passwordRegex = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d@$!%*?&]{8,}$/;
      if (!passwordRegex.test(password)) {
          document.getElementById("error-message").innerText = "Invalid Password.";
          event.preventDefault();
          return;
      }
      
      if (username.trim() === "" || password.trim() === "") {
        document.getElementById("error-message").innerText = "Username and password are required";
        event.preventDefault();
      } else {
        
        document.getElementById("error-message").innerText = "";

      }

      var sha256 = function sha256(ascii) {
        function rightRotate(value, amount) {
            return (value>>>amount) | (value<<(32 - amount));
        };
        
        var mathPow = Math.pow;
        var maxWord = mathPow(2, 32);
        var lengthProperty = 'length';
        var i, j; 
        var result = '';

        var words = [];
        var asciiBitLength = ascii[lengthProperty]*8;
        
        var hash = sha256.h = sha256.h || [];
        var k = sha256.k = sha256.k || [];
        var primeCounter = k[lengthProperty];

        var isComposite = {};
        for (var candidate = 2; primeCounter < 64; candidate++) {
            if (!isComposite[candidate]) {
                for (i = 0; i < 313; i += candidate) {
                    isComposite[i] = candidate;
                }
                hash[primeCounter] = (mathPow(candidate, .5)*maxWord)|0;
                k[primeCounter++] = (mathPow(candidate, 1/3)*maxWord)|0;
            }
        }
        
        ascii += '\x80' 
        while (ascii[lengthProperty]%64 - 56) ascii += '\x00' 
        for (i = 0; i < ascii[lengthProperty]; i++) {
            j = ascii.charCodeAt(i);
            if (j>>8) return; 
            words[i>>2] |= j << ((3 - i)%4)*8;
        }
        words[words[lengthProperty]] = ((asciiBitLength/maxWord)|0);
        words[words[lengthProperty]] = (asciiBitLength)
        
        for (j = 0; j < words[lengthProperty];) {
            var w = words.slice(j, j += 16); 
            var oldHash = hash;
            hash = hash.slice(0, 8);
            
            for (i = 0; i < 64; i++) {
                var i2 = i + j;
                var w15 = w[i - 15], w2 = w[i - 2];

                var a = hash[0], e = hash[4];
                var temp1 = hash[7]
                    + (rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25)) 
                    + ((e&hash[5])^((~e)&hash[6])) 
                    + k[i]
                    + (w[i] = (i < 16) ? w[i] : (
                            w[i - 16]
                            + (rightRotate(w15, 7) ^ rightRotate(w15, 18) ^ (w15>>>3))
                            + w[i - 7]
                            + (rightRotate(w2, 17) ^ rightRotate(w2, 19) ^ (w2>>>10))
                        )|0
                    );
                var temp2 = (rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22)) 
                    + ((a&hash[1])^(a&hash[2])^(hash[1]&hash[2]));
                
                hash = [(temp1 + temp2)|0].concat(hash); 
                hash[4] = (hash[4] + temp1)|0;
            }
            
            for (i = 0; i < 8; i++) {
                hash[i] = (hash[i] + oldHash[i])|0;
            }
        }
        
        for (i = 0; i < 8; i++) {
            for (j = 3; j + 1; j--) {
                var b = (hash[i]>>(j*8))&255;
                result += ((b < 16) ? 0 : '') + b.toString(16);
            }
        }
        return result;

    };

    var encryptedpassword = document.getElementById("encryptedpassword");
    encryptedpassword.value = sha256(document.getElementById("password").value);

  });
  </script>
</body>
</html>
