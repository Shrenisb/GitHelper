<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat with {{receiverUsername}}</title>

  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">

  <!-- Font Awesome for Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Roboto', sans-serif;
    }

    body {
      background-image: url('/image.jpg');
      background-repeat: no-repeat;
      background-position: center center;
      background-attachment: fixed;
      background-size: cover;
      color: #fff;
      height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: center;
      position: relative;
    }

    /* Gradient Overlay */
    body::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
      z-index: 1;
    }

    .header {
      font-size: 32px;
      color: #e1b12c;
      text-align: center;
      padding: 20px;
      width: 100%;
      background-color: rgba(0, 0, 0, 0.2);
      border-bottom: 2px solid #e1b12c;
      position: relative;
      z-index: 2;
    }

    .back-btn {
      position: absolute;
      left: 20px;
      background: none;
      border: none;
      font-size: 24px;
      color: #e1b12c;
      cursor: pointer;
      transition: color 0.3s ease;
    }

    .back-btn:hover {
      color: #fff;
    }

    .chat-container {
      flex-grow: 1;
      width: 100%;
      max-width: 1200px;
      padding: 20px;
      overflow-y: auto;
      margin: 20px auto;
      border-radius: 15px;
      background-color: rgba(255, 255, 255, 0.1);
      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.6);
      position: relative;
      z-index: 2;
    }

    .message {
      display: flex;
      margin-bottom: 15px;
      padding: 12px 18px;
      border-radius: 18px;
      max-width: 60%;
      word-wrap: break-word;
      font-size: 16px;
      position: relative;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
      transition: background-color 0.3s ease, transform 0.3s ease;
      opacity: 0;
      animation: fadeIn 0.5s forwards;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .sender {
      align-self: flex-end;
      background-color: #e1b12c;
      color: #080b41;
      border-radius: 18px 18px 0 18px;
      margin-left: auto;
    }

    .receiver {
      align-self: flex-start;
      background-color: #7a7f9d;
      color: #080b41           ;
      border-radius: 18px 18px 18px 0;
      margin-right: auto;
    }

    .timestamp {
      font-size: 12px;
      color: #bbb;
      margin-top: 8px;
      text-align: right;
    }

    .input-container {
      display: flex;
      padding: 15px;
      background-color: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      width: 100%;
      max-width: 1200px;
      border-radius: 10px;
      margin-bottom: 20px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.6);
      position: relative;
      z-index: 2;
    }

    .input-container input {
      flex: 1;
      padding: 12px;
      border: 1px solid #ccc;
      border-radius: 20px;
      margin-right: 10px;
      font-size: 16px;
      background-color: rgba(255, 255, 255, 0.15);
      color: #fff;
      transition: border 0.3s ease;
    }

    .input-container input::placeholder {
      color: #ddd;
    }

    .input-container input:focus {
      outline: none;
      border: 1px solid #e1b12c;
    }

    .input-container button {
      padding: 12px 20px;
      background-color: #e1b12c;
      color: #080b41;
      border: none;
      border-radius: 20px;
      cursor: pointer;
      transition: background-color 0.3s ease, transform 0.3s ease;
      font-size: 16px;
    }

    .input-container button:hover {
      background-color: #e4c484;
      transform: scale(1.05);
    }

    /* Scrollbar */
    .chat-container::-webkit-scrollbar {
      width: 10px;
    }

    .chat-container::-webkit-scrollbar-thumb {
      background-color: #e1b12c;
      border-radius: 10px;
    }

    .chat-container::-webkit-scrollbar-track {
      background-color: rgba(240, 240, 240, 0.2);
    }

    @media (max-width: 768px) {
      .chat-container {
        width: 95%;
      }

      .header {
        font-size: 28px;
      }
    }
  </style>
</head>
<body>

  <div class="header">
    <button class="back-btn" onclick="window.history.back()"><i class="fas fa-arrow-left"></i></button>
    <i class="fas fa-comments"></i> Chat with {{receiverUsername}}
  </div>

  <div class="chat-container" id="chat-container">
    {{#each messages}}
      <div class="message {{#ifCond sender ../senderUserId}}sender{{else}}receiver{{/ifCond}}">
        {{msg}}
        <div class="timestamp">{{timestamp}}</div>
      </div>
    {{/each}}
  </div>

  <div class="input-container">
    <input type="text" id="message" placeholder="Type a message...">
    <button id="sendBtn"><i class="fas fa-paper-plane"></i> Send</button>
  </div>

  <input type="hidden" id="senderUserId" value="{{senderUserId}}" required readonly>
  <input type="hidden" id="receiverUserId" value="{{receiverUserId}}" required readonly>
  <input type="hidden" id="convoId" value="{{convoId}}" required readonly>

<script src="/socket.io/socket.io.js"></script>
<script>
  const sender = document.getElementById('senderUserId');
  const receiver = document.getElementById('receiverUserId');
  const convo = document.getElementById('convoId');

  const socket = io({
    auth: {
      userId: sender.value,
      receiverId: receiver.value
    }
  });

  const sendBtn = document.getElementById("sendBtn");
  const messageInput = document.getElementById("message");
  const chatContainer = document.getElementById("chat-container");

  function validateMessage(msg) {
    if (typeof msg !== 'string') {
      alert('Message must be a string.');
      return false;
    }
    if (msg.trim().length === 0 || msg.length > 500) {
      alert('Message length must be between 1 and 500 characters.');
      return false;
    }
    return true;
  }

  function sendMessage() {
    const msg = messageInput.value;
    messageInput.value = ''; 

    if (!validateMessage(msg)) return;

    const jsonMsg = {
      convoId: convo.value,
      receiver: receiver.value,
      msg: msg,
      sender: sender.value
    };

    socket.emit('user-message', jsonMsg);
  }

  sendBtn.addEventListener("click", sendMessage);

  messageInput.addEventListener("keydown", (event) => {
    if (event.key === "Enter") {
      event.preventDefault(); 
      sendMessage();
    }
  });

  function appendMessage(msg, type) {
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('message', type);
    messageDiv.innerText = msg;

    chatContainer.appendChild(messageDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;
  }

  socket.on('received-message', (msg) => {
    appendMessage(msg, 'receiver');
  });

  socket.on('sent-message', (msg) => {
    appendMessage(msg, 'sender');
  });

  socket.on('error', (msg) => {
    alert(msg.message)
    window.history.back()
  });

  socket.on('chat_rule', (msg) => {
      alert(msg.message)
  });
</script>

</body>
</html>


